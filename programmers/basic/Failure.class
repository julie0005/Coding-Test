import java.util.*;
import java.util.stream.*;
class Failure {
    public List<Integer> solution(int N, int[] stages) {
        int[] answer = new int[N];
        int[] clearCnt = new int[N+1];
        int[] ing = new int[N+1];
        List<Stage> stageList = new ArrayList<>();
        for(int i=0; i<stages.length; i++){
            for(int j=1; j<=stages[i]; j++) {
                if(j == N+1) continue;
                clearCnt[j]++;
            }
            if(stages[i] <= N) ing[stages[i]]++;
        }
        for(int i=0; i<N; i++) {
            stageList.add(new Stage(i+1, clearCnt[i+1] ==0 ? 0 : (double)ing[i+1]/clearCnt[i+1]));
        }
        Collections.sort(stageList, (s1, s2) -> {
            if(s2.failure - s1.failure > 0) return 1;
            else if(s2.failure == s1.failure) return 0;
            else return -1;
        });
        return stageList.stream().map(s -> s.index).collect(Collectors.toList());
    }
    
    class Stage {
        int index;
        double failure;
        
        public Stage(int index, double failure) {
            this.index = index;
            this.failure = failure;
        }
    }
}